{"input":{"ourVersion":"1.45.1","commit":"5763d909d5f12fe19f215cbfdd29a91c0fa9208a","locale":"en","devMode":false,"absoluteFolderPath":"/root/.vscode/extensions","isBuiltin":false,"isUnderDevelopment":false,"tanslations":{},"mtime":1605772002860},"result":[{"name":"react-native-react-redux","displayName":"React-Native/React/Redux snippets for es6/es7","description":"Code snippets for React-Native/React/Redux es6/es7 and flowtype/typescript, Storybook","version":"2.0.6","galleryBanner":{"theme":"light","color":"#FFFFFF"},"repository":{"type":"git","url":"https://github.com/EQuimper/VSC-React-Native-React-Redux-Snippets"},"icon":"images/react-redux.jpg","publisher":"EQuimper","keywords":["vscode","snippets","react","redux","react-native","es6","es7","javascript","storybook"],"badges":[{"url":"https://vsmarketplacebadge.apphb.com/version-short/EQuimper.react-native-react-redux.svg","href":"https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux","description":"Version"},{"url":"https://vsmarketplacebadge.apphb.com/installs-short/EQuimper.react-native-react-redux.svg","href":"https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux","description":"Install Count"},{"url":"https://vsmarketplacebadge.apphb.com/rating-short/EQuimper.react-native-react-redux.svg","href":"https://marketplace.visualstudio.com/items?itemName=EQuimper.react-native-react-redux","description":"Rating"}],"engines":{"vscode":"^1.5.0"},"categories":["Snippets"],"contributes":{"snippets":[{"language":"javascriptreact","path":"./snippets/snippets.json"},{"language":"javascript","path":"./snippets/snippets.json"},{"language":"typescript","path":"./snippets/snippets.json"},{"language":"typescriptreact","path":"./snippets/snippets.json"},{"language":"jsx","path":"./snippets/snippets.json"}]},"uuid":"7f7e0e9c-b5ad-4e21-a425-f63bd56cb13f","isBuiltin":false,"isUnderDevelopment":false,"id":"EQuimper.react-native-react-redux","identifier":{"value":"EQuimper.react-native-react-redux","_lower":"equimper.react-native-react-redux"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/equimper.react-native-react-redux-2.0.6","path":"/root/.vscode/extensions/equimper.react-native-react-redux-2.0.6","scheme":"file"}},{"name":"prettier-vscode","displayName":"Prettier - Code formatter","description":"Code formatter using prettier","version":"5.5.0","publisher":"esbenp","author":"Prettier <@prettiercode>","galleryBanner":{"color":"#ffe04b","theme":"light"},"homepage":"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode","repository":{"type":"git","url":"https://github.com/prettier/prettier-vscode.git"},"license":"MIT","bugs":{"url":"https://github.com/prettier/prettier-vscode/issues"},"engines":{"vscode":"^1.41.0"},"keywords":["multi-root ready","prettier","formatter","javascript","js","jsx","flow","typescript","ts","json","css","less","scss","styled-components","styled-jsx","markdown","md","commonmark","mdx","php","pug","ruby","swift","html","vue","angular","graphql","yaml","yml"],"categories":["Formatters"],"activationEvents":["*"],"icon":"icon.png","main":"./dist/extension","scripts":{"clean":"node ./scripts/clean.js","lint":"eslint -c .eslintrc.js --ext .ts .","pretest":"yarn test-compile && cd test-fixtures/plugins && yarn install && cd ../outdated && yarn install && cd ../module && yarn install && cd ../specific-version && yarn install && cd ../explicit-dep && yarn install && cd implicit-dep && yarn install","prettier":"prettier --write '**/*.{ts,json,md,yml,js}'","test-compile":"yarn clean && tsc -p ./ && yarn webpack","test":"node ./out/test/runTests.js","version":"node ./scripts/version.js && git add CHANGELOG.md","vscode:prepublish":"webpack --mode production","watch":"tsc --watch -p ./","webpack-dev":"webpack --mode development --watch","webpack":"webpack --mode development"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"lint-staged":{"**/*.{ts,json,md,yml,js}":["prettier --write"],"src/**/*.ts":["eslint -c .eslintrc.js --ext .ts ."]},"devDependencies":{"@types/glob":"^7.1.3","@types/lodash":"^4.14.160","@types/mocha":"^8.0.0","@types/node":"^12","@types/prettier":"^2.1.0","@types/resolve":"^1.17.0","@types/semver":"^7.3.1","@types/sinon":"^9.0.4","@types/vscode":"1.41","@typescript-eslint/eslint-plugin":"^3.7.0","@typescript-eslint/parser":"^3.6.1","eslint":"^7.4.0","eslint-config-prettier":"^6.11.0","glob":"^7.1.6","husky":"^4.2.5","lint-staged":"^10.2.11","mocha":"^8.0.1","sinon":"^9.0.2","ts-loader":"^8.0.1","typescript":"^4.0.2","vsce":"^1.77.0","vscode-nls-dev":"^3.3.2","vscode-test":"^1.4.0","webpack":"^4.43.0","webpack-cli":"^3.3.12"},"dependencies":{"find-up":"^5.0.0","ignore":"^5.1.8","lodash":"^4.17.20","mem":"^6.1.0","prettier":"^2.1.0","resolve":"^1.17.0","semver":"^7.3.2","vscode-nls":"^4.1.2"},"contributes":{"configuration":{"type":"object","title":"Prettier","properties":{"prettier.disableLanguages":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of languages IDs to disable this extension on","scope":"window"},"prettier.documentSelectors":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter","scope":"window"},"prettier.enable":{"type":"boolean","default":true,"markdownDescription":"Controls whether prettier is enabled or not.","scope":"resource"},"prettier.requireConfig":{"type":"boolean","default":false,"markdownDescription":"Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).\n\n> _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._","scope":"resource"},"prettier.resolveGlobalModules":{"type":"boolean","default":false,"markdownDescription":"When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.\n> _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._","scope":"resource"},"prettier.withNodeModules":{"type":"boolean","default":false,"markdownDescription":"If true, this extension will process files in node_modules","scope":"resource"},"prettier.packageManager":{"scope":"resource","type":"string","enum":["npm","yarn","pnpm"],"default":"npm","markdownDescription":"The package manager you use to install node modules."},"prettier.useEditorConfig":{"type":"boolean","default":true,"markdownDescription":"Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.","scope":"resource"},"prettier.ignorePath":{"type":"string","default":".prettierignore","markdownDescription":"Path to a .prettierignore file","scope":"resource"},"prettier.prettierPath":{"type":"string","markdownDescription":"Path to the prettier module","scope":"resource"},"prettier.configPath":{"type":"string","markdownDescription":"Path to the prettier configuration file","scope":"resource"},"prettier.printWidth":{"type":"integer","default":80,"markdownDescription":"Fit code within this line limit","scope":"resource"},"prettier.tabWidth":{"type":"integer","default":2,"markdownDescription":"Number of spaces it should use per tab","scope":"resource"},"prettier.singleQuote":{"type":"boolean","default":false,"markdownDescription":"If true, will use single instead of double quotes","scope":"resource"},"prettier.trailingComma":{"type":"string","enum":["none","es5","all"],"default":"es5","markdownDescription":"Controls the printing of trailing commas wherever possible. Valid options:\n- `none` - No trailing commas\n- `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)\n- `all` - Trailing commas wherever possible (function arguments)","scope":"resource"},"prettier.bracketSpacing":{"type":"boolean","default":true,"markdownDescription":"Controls the printing of spaces inside object literals","scope":"resource"},"prettier.jsxBracketSameLine":{"type":"boolean","default":false,"markdownDescription":"If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line","scope":"resource"},"prettier.semi":{"type":"boolean","default":true,"markdownDescription":"Whether to add a semicolon at the end of every line","scope":"resource"},"prettier.requirePragma":{"type":"boolean","default":false,"markdownDescription":"Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.","scope":"resource"},"prettier.insertPragma":{"type":"boolean","default":false,"markdownDescription":"Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.","scope":"resource"},"prettier.useTabs":{"type":"boolean","default":false,"markdownDescription":"Indent lines with tabs","scope":"resource"},"prettier.proseWrap":{"type":"string","enum":["preserve","always","never"],"default":"preserve","markdownDescription":"(Markdown) wrap prose over multiple lines","scope":"resource"},"prettier.arrowParens":{"type":"string","enum":["avoid","always"],"default":"always","markdownDescription":"Include parentheses around a sole arrow function parameter","scope":"resource"},"prettier.jsxSingleQuote":{"type":"boolean","default":false,"markdownDescription":"Use single quotes instead of double quotes in JSX","scope":"resource"},"prettier.htmlWhitespaceSensitivity":{"type":"string","enum":["css","strict","ignore"],"default":"css","markdownDescription":"Specify the global whitespace sensitivity for HTML files.\n Valid options:\n- `css` - Respect the default value of CSS display property.\n- `strict` - Whitespaces are considered sensitive.\n- `ignores` - Whitespaces are considered insensitive.","scope":"resource"},"prettier.vueIndentScriptAndStyle":{"type":"boolean","default":false,"markdownDescription":"Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.","scope":"resource"},"prettier.endOfLine":{"type":"string","enum":["auto","lf","crlf","cr"],"default":"lf","markdownDescription":"Specify the end of line used by prettier","scope":"resource"},"prettier.quoteProps":{"type":"string","enum":["as-needed","consistent","preserve"],"default":"as-needed","markdownDescription":"Change when properties in objects are quoted","scope":"resource"},"prettier.embeddedLanguageFormatting":{"type":"string","enum":["auto","off"],"default":"auto","markdownDescription":"Control whether Prettier formats quoted code embedded in the file.","scope":"resource"}}},"jsonValidation":[{"fileMatch":".prettierrc","url":"http://json.schemastore.org/prettierrc"},{"fileMatch":".prettierrc.json","url":"http://json.schemastore.org/prettierrc"},{"fileMatch":"package.json","url":"./package-json-schema.json"}],"languages":[{"id":"json","filenames":[".prettierrc"]},{"id":"ignore","filenames":[".prettierignore"]},{"id":"graphql","extensions":[".graphql"]},{"id":"vue","extensions":[".vue"]}],"commands":[{"command":"prettier.createConfigFile","title":"Prettier: Create Configuration File"}]},"uuid":"96fa4707-6983-4489-b7c5-d5ffdfdcce90","isBuiltin":false,"isUnderDevelopment":false,"id":"esbenp.prettier-vscode","identifier":{"value":"esbenp.prettier-vscode","_lower":"esbenp.prettier-vscode"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/esbenp.prettier-vscode-5.5.0","path":"/root/.vscode/extensions/esbenp.prettier-vscode-5.5.0","scheme":"file"}},{"name":"js-debug","displayName":"JavaScript Debugger","version":"1.47.5","publisher":"ms-vscode","author":{"name":"Microsoft Corporation"},"keywords":["pwa","javascript","node","chrome","debugger"],"preview":true,"description":"An extension for debugging Node.js programs and Chrome.","license":"MIT","engines":{"vscode":"^1.30.0-insider","node":">=10"},"icon":"resources/logo.png","categories":["Debuggers"],"private":true,"repository":{"type":"git","url":"https://github.com/Microsoft/vscode-pwa.git"},"bugs":{"url":"https://github.com/Microsoft/vscode-pwa/issues"},"husky":{"hooks":{"pre-commit":"npm run test:lint && npm run test:types"}},"scripts":{"compile":"gulp","watch":"gulp watch","fmt":"gulp format","package":"gulp package","publish":"gulp publish","updatetypes":"cd src/typings && vscode-dts dev && vscode-dts master","generateapis":"node out/src/build/generateDap.js && node out/src/build/generateCdp.js","test":"gulp && npm-run-all --parallel test:types test:golden test:lint","test:types":"tsc --noEmit","test:golden":"node ./out/src/test/runTest.js","test:lint":"gulp lint"},"dependencies":{"@c4312/chromehash":"^0.2.0","color":"^3.1.2","default-browser":"^2.0.1","execa":"^4.0.0","glob-stream":"^6.1.0","got":"^11.1.4","inversify":"^5.0.1","js-beautify":"^1.11.0","jsonc-parser":"^2.2.1","micromatch":"^4.0.2","reflect-metadata":"^0.1.13","signale":"^1.4.0","source-map":"0.8.0-beta.0","source-map-support":"^0.5.19","split2":"^3.1.1","typescript":"^3.8.3","vscode-js-debug-browsers":"^1.0.3","vscode-nls":"^4.1.2","ws":"^7.2.3"},"prettier":{"trailingComma":"all","singleQuote":true,"arrowParens":"avoid","printWidth":100,"tabWidth":2},"devDependencies":{"@mixer/parallel-prettier":"^2.0.0","@pptr/testrunner":"^0.8.0","@types/chai":"^4.2.11","@types/chai-as-promised":"^7.1.2","@types/chai-string":"^1.4.2","@types/chai-subset":"^1.3.3","@types/color":"^3.0.1","@types/debug":"^4.1.5","@types/del":"^4.0.0","@types/express":"^4.17.4","@types/glob":"^7.1.1","@types/glob-stream":"^6.1.0","@types/gulp":"^4.0.6","@types/js-beautify":"^1.8.2","@types/json-schema":"^7.0.4","@types/lodash":"^4.14.149","@types/long":"^4.0.1","@types/marked":"^0.7.4","@types/micromatch":"^4.0.1","@types/minimist":"^1.2.0","@types/mkdirp":"^1.0.0","@types/mocha":"^7.0.2","@types/node":"^13.11.0","@types/prettier":"^2.0.0","@types/signale":"^1.4.1","@types/sinon":"^9.0.0","@types/split2":"^2.1.6","@types/stream-buffers":"^3.0.3","@types/tmp":"^0.1.0","@types/ws":"^7.2.3","@typescript-eslint/eslint-plugin":"^2.27.0","@typescript-eslint/parser":"^2.27.0","chai":"^4.2.0","chai-as-promised":"^7.1.1","chai-string":"^1.5.0","chai-subset":"^1.6.0","deepmerge":"^4.2.2","del":"^5.1.0","eslint":"^6.8.0","eslint-plugin-header":"^3.0.0","event-stream":"^4.0.1","express":"^4.17.1","glob":"^7.1.6","gulp":"^4.0.2","gulp-eslint":"^6.0.0","gulp-filter":"^6.0.0","gulp-rename":"^2.0.0","gulp-replace":"^1.0.0","gulp-sourcemaps":"^2.6.5","gulp-tsb":"^4.0.5","gulp-util":"^3.0.8","husky":"^4.2.3","lodash":"^4.17.15","marked":"^1.1.0","merge2":"^1.3.0","minimist":"^1.2.5","mkdirp":"^1.0.4","mocha":"^7.1.1","mocha-junit-reporter":"^1.23.3","mocha-multi-reporters":"^1.1.7","npm-run-all":"^4.1.5","nyc":"^15.0.1","playwright":"^0.12.1","prettier":"^2.0.4","sinon":"^9.0.1","stream-buffers":"^3.0.2","ts-node":"^8.8.2","unzipper":"^0.10.11","vsce":"^1.75.0","vscode-debugadapter-testsupport":"^1.40.3","vscode-debugprotocol":"^1.40.0","vscode-nls-dev":"^3.3.2","vscode-test":"^1.3.0","webpack":"^4.42.1","webpack-bundle-analyzer":"^3.6.1"},"main":"./src/extension.js","enableProposedApi":true,"activationEvents":["onLanguage:json","onDebugDynamicConfigurations","onDebugInitialConfigurations","onDebugResolve:node","onDebugResolve:extensionHost","onDebugResolve:chrome","onCommand:extension.pwa-chrome-debug.addCustomBreakpoints","onCommand:extension.pwa-node-debug.attachNodeProcess","onCommand:extension.js-debug.clearAutoAttachVariables","onCommand:extension.js-debug.setAutoAttachVariables","onCommand:extension.js-debug.autoAttachToProcess","onCommand:extension.pwa-node-debug.createDebuggerTerminal","onCommand:extension.pwa-node-debug.npmScript","onCommand:extension.js-debug.experimentEnlist","onCommand:extension.pwa-node-debug.pickNodeProcess","onCommand:extension.pwa-node-debug.prettyPrint","onCommand:extension.pwa-chrome-debug.removeAllCustomBreakpoints","onCommand:extension.pwa-chrome-debug.removeCustomBreakpoint","onCommand:extension.pwa-node-debug.startProfile","onCommand:extension.pwa-node-debug.stopProfile","onCommand:extension.pwa-node-debug.toggleSkippingFile","onCommand:extension.js-debug.revealPage","onDebugResolve:pwa-node","onDebugResolve:pwa-node","onDebugResolve:node-terminal","onDebugResolve:pwa-extensionHost","onDebugResolve:pwa-chrome","onDebugResolve:pwa-chrome","onDebugResolve:pwa-msedge","onDebugResolve:pwa-msedge"],"extensionKind":["workspace"],"contributes":{"views":{"debug":[{"id":"jsBrowserBreakpoints","name":"Browser breakpoints","when":"debugConfigurationType == 'pwa-chrome'"}]},"viewsWelcome":[{"view":"debug","contents":"[Node.js Debug Terminal](command:extension.pwa-node-debug.createDebuggerTerminal)\n\nYou can use the Node.js Debug Terminal to instantly debug JavaScript you run from the command line.","when":"debugStartLanguage == javascript || debugStartLanguage == typescript"}],"terminal":{"types":[{"command":"extension.pwa-node-debug.createDebuggerTerminal","title":"Create JavaScript Debug Terminal"}]},"menus":{"commandPalette":[{"command":"extension.pwa-node-debug.prettyPrint","title":"Pretty print for debugging","when":"debugType == pwa-extensionHost && inDebugMode || debugType == node-terminal && inDebugMode || debugType == pwa-node && inDebugMode || debugType == pwa-chrome && inDebugMode || debugType == pwa-msedge && inDebugMode"},{"command":"extension.pwa-node-debug.startProfile","title":"Take Performance Profile","when":"debugType == pwa-extensionHost && inDebugMode && !jsDebugIsProfiling || debugType == node-terminal && inDebugMode && !jsDebugIsProfiling || debugType == pwa-node && inDebugMode && !jsDebugIsProfiling || debugType == pwa-chrome && inDebugMode && !jsDebugIsProfiling || debugType == pwa-msedge && inDebugMode && !jsDebugIsProfiling"},{"command":"extension.pwa-node-debug.startProfile","title":"Stop Performance Profile","when":"debugType == pwa-extensionHost && inDebugMode && jsDebugIsProfiling || debugType == node-terminal && inDebugMode && jsDebugIsProfiling || debugType == pwa-node && inDebugMode && jsDebugIsProfiling || debugType == pwa-chrome && inDebugMode && jsDebugIsProfiling || debugType == pwa-msedge && inDebugMode && jsDebugIsProfiling"},{"command":"extension.js-debug.revealPage","when":"false"}],"debug/callstack/context":[{"command":"extension.js-debug.revealPage","group":"navigation","when":"debugType == pwa-chrome && callStackItemType == 'session' || debugType == pwa-msedge && callStackItemType == 'session'"},{"command":"extension.pwa-node-debug.toggleSkippingFile","group":"navigation","when":"debugType == pwa-extensionHost && callStackItemType == 'session' || debugType == node-terminal && callStackItemType == 'session' || debugType == pwa-node && callStackItemType == 'session' || debugType == pwa-chrome && callStackItemType == 'session' || debugType == pwa-msedge && callStackItemType == 'session'"},{"command":"extension.pwa-node-debug.startProfile","group":"navigation","when":"debugType == pwa-extensionHost && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == node-terminal && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-node && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-chrome && !jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-msedge && !jsDebugIsProfiling && callStackItemType == 'session'"},{"command":"extension.pwa-node-debug.stopProfile","group":"navigation","when":"debugType == pwa-extensionHost && jsDebugIsProfiling && callStackItemType == 'session' || debugType == node-terminal && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-node && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-chrome && jsDebugIsProfiling && callStackItemType == 'session' || debugType == pwa-msedge && jsDebugIsProfiling && callStackItemType == 'session'"},{"command":"extension.pwa-node-debug.startProfile","group":"inline","when":"debugType == pwa-extensionHost && !jsDebugIsProfiling || debugType == node-terminal && !jsDebugIsProfiling || debugType == pwa-node && !jsDebugIsProfiling || debugType == pwa-chrome && !jsDebugIsProfiling || debugType == pwa-msedge && !jsDebugIsProfiling"},{"command":"extension.pwa-node-debug.stopProfile","group":"inline","when":"debugType == pwa-extensionHost && jsDebugIsProfiling || debugType == node-terminal && jsDebugIsProfiling || debugType == pwa-node && jsDebugIsProfiling || debugType == pwa-chrome && jsDebugIsProfiling || debugType == pwa-msedge && jsDebugIsProfiling"}],"debug/toolBar":[{"command":"extension.pwa-node-debug.stopProfile","when":"debugType == pwa-extensionHost && jsDebugIsProfiling || debugType == node-terminal && jsDebugIsProfiling || debugType == pwa-node && jsDebugIsProfiling || debugType == pwa-chrome && jsDebugIsProfiling || debugType == pwa-msedge && jsDebugIsProfiling"}],"view/title":[{"command":"extension.pwa-chrome-debug.addCustomBreakpoints","when":"view == jsBrowserBreakpoints"},{"command":"extension.pwa-chrome-debug.removeAllCustomBreakpoints","when":"view == jsBrowserBreakpoints"}],"view/item/context":[{"command":"extension.pwa-chrome-debug.removeCustomBreakpoint","when":"view == jsBrowserBreakpoints","group":"inline"},{"command":"extension.pwa-chrome-debug.addCustomBreakpoints","when":"view == jsBrowserBreakpoints"},{"command":"extension.pwa-chrome-debug.removeCustomBreakpoint","when":"view == jsBrowserBreakpoints"}]},"breakpoints":[{"language":"javascript"},{"language":"typescript"},{"language":"typescriptreact"},{"language":"javascriptreact"},{"language":"fsharp"},{"language":"html"}],"debuggers":[{"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"attach":{"properties":{"address":{"default":"localhost","description":"TCP/IP address of process to be debugged. Default is 'localhost'.","type":"string"},"attachExistingChildren":{"default":false,"description":"Whether to attempt to attach to already-spawned child processes.","type":"boolean"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"continueOnAttach":{"default":true,"markdownDescription":"If true, we'll automatically resume programs launched and waiting on `--inspect-brk`","type":"boolean"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":9229,"description":"Debug port to attach to. Default is 5858.","type":"number"},"processId":{"default":"${command:PickProcess}","description":"ID of process to attach to.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}}},"launch":{"properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}}}},"configurationSnippets":[{"body":{"name":"${1:Attach}","port":9229,"request":"attach","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Attach to a running node program","label":"Node.js: Attach"},{"body":{"address":"${2:TCP/IP address of process to be debugged}","localRoot":"^\"\\${workspaceFolder}\"","name":"${1:Attach to Remote}","port":9229,"remoteRoot":"${3:Absolute path to the remote directory containing the program}","request":"attach","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Attach to the debug port of a remote node program","label":"Node.js: Attach to Remote Program"},{"body":{"name":"${1:Attach by Process ID}","processId":"^\"\\${command:PickProcess}\"","request":"attach","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Open process picker to select node process to attach to","label":"Node.js: Attach to Process"},{"body":{"name":"${2:Launch Program}","program":"^\"\\${workspaceFolder}/${1:app.js}\"","request":"launch","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Launch a node program in debug mode","label":"Node.js: Launch Program"},{"body":{"name":"${1:Launch via NPM}","request":"launch","runtimeArgs":["run-script","debug"],"runtimeExecutable":"npm","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"label":"Node.js: Launch via NPM","markdownDescription":"Launch a node program through an npm `debug` script"},{"body":{"console":"integratedTerminal","internalConsoleOptions":"neverOpen","name":"nodemon","program":"^\"\\${workspaceFolder}/${1:app.js}\"","request":"launch","restart":true,"runtimeExecutable":"nodemon","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Use nodemon to relaunch a debug session on source changes","label":"Node.js: Nodemon Setup"},{"body":{"args":["-u","tdd","--timeout","999999","--colors","^\"\\${workspaceFolder}/${1:test}\""],"internalConsoleOptions":"openOnSessionStart","name":"Mocha Tests","program":"^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"","request":"launch","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Debug mocha tests","label":"Node.js: Mocha Tests"},{"body":{"args":["${1:generator}"],"console":"integratedTerminal","internalConsoleOptions":"neverOpen","name":"Yeoman ${1:generator}","program":"^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"","request":"launch","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"label":"Node.js: Yeoman generator","markdownDescription":"Debug yeoman generator (install by running `npm link` in project folder)"},{"body":{"args":["${1:task}"],"name":"Gulp ${1:task}","program":"^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"","request":"launch","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Debug gulp task (make sure to have a local gulp installed in your project)","label":"Node.js: Gulp task"},{"body":{"name":"Electron Main","program":"^\"\\${workspaceFolder}/main.js\"","request":"launch","runtimeExecutable":"^\"\\${workspaceFolder}/node_modules/.bin/electron\"","skipFiles":["<node_internals>/**"],"type":"pwa-node"},"description":"Debug the Electron main process","label":"Node.js: Electron Main"}],"label":"Node.js (preview)","languages":["javascript","typescript","javascriptreact","typescriptreact"],"type":"pwa-node","variables":{"PickProcess":"extension.pwa-node-debug.pickNodeProcess"}},{"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"launch":{"properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}}}},"configurationSnippets":[{"body":{"command":"npm start","name":"Run npm start","request":"launch","type":"node-terminal"},"description":"Run \"npm start\" in a debug terminal","label":"Run \"npm start\" in a debug terminal"}],"label":"Create JavaScript Debug Terminal","languages":[],"type":"node-terminal"},{"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"launch":{"properties":{"args":{"default":["--extensionDevelopmentPath=${workspaceFolder}"],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"debugWebviews":{"default":true,"markdownDescription":"Configures whether we should try to attach to webviews in the launched VS Code instance. **Note:** at the moment this requires the setting `\"webview.experimental.useExternalEndpoint\": true` to work properly, and will only work in desktop VS Code.","oneOf":[{"default":true,"type":["boolean"]},{"properties":{"address":{"default":"localhost","description":"IP address or hostname the debugged browser is listening on.","type":"string"},"disableNetworkCache":{"default":true,"description":"Controls whether to skip the network cache for each request","type":"boolean"},"inspectUri":{"default":null,"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","type":["string","null"]},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pathMapping":{"default":{},"description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","type":"object"},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":9229,"description":"Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.","type":"number"},"resolveSourceMapLocations":{"default":null,"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":false,"markdownDescription":"Whether to reconnect if the browser connection is closed","type":"boolean"},"server":{"oneOf":[{"additionalProperties":false,"default":{"program":"node my-server.js"},"description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"},{"additionalProperties":false,"default":{"program":"npm start"},"description":"Create JavaScript Debug Terminal","properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"}]},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"targetSelection":{"default":"automatic","enum":["pick","automatic"],"markdownDescription":"Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").","type":"string"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]},"url":{"default":"http://localhost:8080","description":"Will search for a tab with this exact url and attach to it, if found","type":"string"},"urlFilter":{"default":"","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","type":"string"},"vueComponentPaths":{"default":["${workspaceFolder}/**/*.vue"],"description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","type":"array"},"webRoot":{"default":"${workspaceFolder}","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","type":"string"}},"type":"object"}]},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeExecutable":{"default":"node","markdownDescription":"Absolute path to VS Code.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"required":["args"]}},"configurationSnippets":[{"body":{"args":["^\"--extensionDevelopmentPath=\\${workspaceFolder}\""],"name":"Launch Extension","outFiles":["^\"\\${workspaceFolder}/out/**/*.js\""],"preLaunchTask":"npm","request":"launch","runtimeExecutable":"^\"\\${execPath}\"","type":"pwa-extensionHost"},"description":"Launch a VS Code extension in debug mode","label":"VS Code Extension Development"}],"label":"VS Code Extension Development (preview)","languages":["javascript","typescript","javascriptreact","typescriptreact"],"type":"pwa-extensionHost"},{"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"attach":{"properties":{"address":{"default":"localhost","description":"IP address or hostname the debugged browser is listening on.","type":"string"},"disableNetworkCache":{"default":true,"description":"Controls whether to skip the network cache for each request","type":"boolean"},"inspectUri":{"default":null,"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","type":["string","null"]},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pathMapping":{"default":{},"description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","type":"object"},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":9229,"description":"Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.","type":"number"},"resolveSourceMapLocations":{"default":null,"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":false,"markdownDescription":"Whether to reconnect if the browser connection is closed","type":"boolean"},"server":{"oneOf":[{"additionalProperties":false,"default":{"program":"node my-server.js"},"description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"},{"additionalProperties":false,"default":{"program":"npm start"},"description":"Create JavaScript Debug Terminal","properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"}]},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"targetSelection":{"default":"automatic","enum":["pick","automatic"],"markdownDescription":"Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").","type":"string"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]},"url":{"default":"http://localhost:8080","description":"Will search for a tab with this exact url and attach to it, if found","type":"string"},"urlFilter":{"default":"","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","type":"string"},"vueComponentPaths":{"default":["${workspaceFolder}/**/*.vue"],"description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","type":"array"},"webRoot":{"default":"${workspaceFolder}","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","type":"string"}}},"launch":{"properties":{"browserLaunchLocation":{"default":null,"description":"Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.","oneOf":[{"type":"null"},{"enum":["ui","workspace"],"type":"string"}]},"cleanUp":{"default":"wholeBrowser","description":"What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.","enum":["wholeBrowser","onlyTab"],"type":"string"},"cwd":{"default":null,"description":"Optional working directory for the runtime executable.","type":"string"},"disableNetworkCache":{"default":true,"description":"Controls whether to skip the network cache for each request","type":"boolean"},"env":{"default":{},"description":"Optional dictionary of environment key/value pairs for the browser.","type":"object"},"file":{"default":"${workspaceFolder}/index.html","description":"A local html file to open in the browser","type":"string"},"includeDefaultArgs":{"default":true,"description":"Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.","type":"boolean"},"inspectUri":{"default":null,"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","type":["string","null"]},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pathMapping":{"default":{},"description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","type":"object"},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":0,"description":"Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.","type":"number"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"resolveSourceMapLocations":{"default":null,"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"stable","description":"Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.","type":["string","null"]},"server":{"oneOf":[{"additionalProperties":false,"default":{"program":"node my-server.js"},"description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"},{"additionalProperties":false,"default":{"program":"npm start"},"description":"Create JavaScript Debug Terminal","properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"}]},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]},"url":{"default":"http://localhost:8080","description":"Will search for a tab with this exact url and attach to it, if found","type":"string"},"urlFilter":{"default":"","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","type":"string"},"userDataDir":{"default":true,"description":"By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.","type":["string","boolean"]},"vueComponentPaths":{"default":["${workspaceFolder}/**/*.vue"],"description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","type":"array"},"webRoot":{"default":"${workspaceFolder}","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","type":"string"}}}},"configurationSnippets":[{"body":{"name":"Launch Chrome","request":"launch","type":"pwa-chrome","url":"http://localhost:8080","webRoot":"^\"${2:\\${workspaceFolder\\}}\""},"description":"Launch Chrome to debug a URL","label":"Chrome: Launch"},{"body":{"name":"Attach to Chrome","port":9222,"request":"attach","type":"pwa-chrome","webRoot":"^\"${2:\\${workspaceFolder\\}}\""},"description":"Attach to an instance of Chrome already in debug mode","label":"Chrome: Attach"}],"label":"Chrome (preview)","languages":["javascript","typescript","javascriptreact","typescriptreact"],"type":"pwa-chrome"},{"aiKey":"AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217","configurationAttributes":{"attach":{"properties":{"address":{"default":"localhost","description":"IP address or hostname the debugged browser is listening on.","type":"string"},"disableNetworkCache":{"default":true,"description":"Controls whether to skip the network cache for each request","type":"boolean"},"inspectUri":{"default":null,"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","type":["string","null"]},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pathMapping":{"default":{},"description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","type":"object"},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":9229,"description":"Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.","type":"number"},"resolveSourceMapLocations":{"default":null,"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":false,"markdownDescription":"Whether to reconnect if the browser connection is closed","type":"boolean"},"server":{"oneOf":[{"additionalProperties":false,"default":{"program":"node my-server.js"},"description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"},{"additionalProperties":false,"default":{"program":"npm start"},"description":"Create JavaScript Debug Terminal","properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"}]},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"targetSelection":{"default":"automatic","enum":["pick","automatic"],"markdownDescription":"Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").","type":"string"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]},"url":{"default":"http://localhost:8080","description":"Will search for a tab with this exact url and attach to it, if found","type":"string"},"urlFilter":{"default":"","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","type":"string"},"useWebView":{"default":false,"description":"(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.","type":"boolean"},"vueComponentPaths":{"default":["${workspaceFolder}/**/*.vue"],"description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","type":"array"},"webRoot":{"default":"${workspaceFolder}","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","type":"string"}}},"launch":{"properties":{"address":{"default":"localhost","description":"When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.","type":"string"},"browserLaunchLocation":{"default":null,"description":"Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.","oneOf":[{"type":"null"},{"enum":["ui","workspace"],"type":"string"}]},"cleanUp":{"default":"wholeBrowser","description":"What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.","enum":["wholeBrowser","onlyTab"],"type":"string"},"cwd":{"default":null,"description":"Optional working directory for the runtime executable.","type":"string"},"disableNetworkCache":{"default":true,"description":"Controls whether to skip the network cache for each request","type":"boolean"},"env":{"default":{},"description":"Optional dictionary of environment key/value pairs for the browser.","type":"object"},"file":{"default":"${workspaceFolder}/index.html","description":"A local html file to open in the browser","type":"string"},"includeDefaultArgs":{"default":true,"description":"Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.","type":"boolean"},"inspectUri":{"default":null,"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","type":["string","null"]},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pathMapping":{"default":{},"description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","type":"object"},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"port":{"default":9229,"description":"When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.","type":"number"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"resolveSourceMapLocations":{"default":null,"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"stable","description":"Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.","type":["string","null"]},"server":{"oneOf":[{"additionalProperties":false,"default":{"program":"node my-server.js"},"description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","properties":{"args":{"default":[],"description":"Command line arguments passed to the program.","items":{"type":"string"},"type":"array"},"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"console":{"default":"internalConsole","description":"Where to launch the debug target.","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"type":"string"},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"profileStartup":{"default":true,"description":"If true, will start profiling soon as the process launches","type":"boolean"},"program":{"default":"","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","type":"string"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"restart":{"default":true,"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","oneOf":[{"type":"boolean"},{"properties":{"delay":{"default":1000,"minimum":0,"type":"number"},"maxAttempts":{"default":10,"minimum":0,"type":"number"}},"type":"object"}]},"runtimeArgs":{"default":[],"description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"type":"array"},"runtimeExecutable":{"default":"node","markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","type":["string","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"runtimeVersion":{"default":"default","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","type":"string"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"stopOnEntry":{"default":true,"description":"Automatically stop program after launch.","type":["boolean","string"]},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"},{"additionalProperties":false,"default":{"program":"npm start"},"description":"Create JavaScript Debug Terminal","properties":{"autoAttachChildProcesses":{"default":true,"description":"Attach debugger to new child processes automatically.","type":"boolean"},"command":{"default":"npm start","description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","type":["string","null"]},"cwd":{"default":"${workspaceFolder}","description":"Absolute path to the working directory of the program being debugged.","type":"string"},"env":{"additionalProperties":{"type":["string","null"]},"default":{},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","type":"object"},"envFile":{"default":"${workspaceFolder}/.env","description":"Absolute path to a file containing environment variable definitions.","type":"string"},"localRoot":{"default":null,"description":"Path to the local directory containing the program.","type":["string","null"]},"nodeVersionHint":{"default":12,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","minimum":8,"type":"number"},"outFiles":{"default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","items":{"type":"string"},"type":["array"]},"outputCapture":{"default":"console","enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."},"pauseForSourceMap":{"default":false,"markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","type":"boolean"},"remoteRoot":{"default":null,"description":"Absolute path to the remote directory containing the program.","type":["string","null"]},"resolveSourceMapLocations":{"default":["${workspaceFolder}/**","!**/node_modules/**"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","items":{"type":"string"},"type":["array","null"]},"runtimeSourcemapPausePatterns":{"default":[],"items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","type":"array"},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]}},"type":"object"}]},"showAsyncStacks":{"default":true,"description":"Show the async calls that led to the current call stack.","oneOf":[{"type":"boolean"},{"properties":{"onAttach":{"default":32,"type":"number"}},"required":["onAttach"],"type":"object"},{"properties":{"onceBreakpointResolved":{"default":32,"type":"number"}},"required":["onceBreakpointResolved"],"type":"object"}]},"skipFiles":{"default":["<node_internals>/**"],"description":"An array of file or folder names, or path globs, to skip when debugging.","type":"array"},"smartStep":{"default":true,"description":"Automatically step through generated code that cannot be mapped back to the original source.","type":"boolean"},"sourceMapPathOverrides":{"default":{"meteor://💻app/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","webpack://?:*/*":"${workspaceFolder}/*"},"description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","type":"object"},"sourceMaps":{"default":true,"description":"Use JavaScript source maps (if they exist).","type":"boolean"},"timeout":{"default":10000,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","type":"number"},"trace":{"default":true,"description":"Configures what diagnostic output is produced.","oneOf":[{"description":"Trace may be set to 'true' to write diagnostic logs to the disk.","type":"boolean"},{"additionalProperties":false,"properties":{"console":{"description":"Whether to return trace data from the launched application or browser.","type":"boolean"},"level":{"description":"Configures the level of logs recorded.","enum":["fatal","error","warn","info","verbose"]},"logFile":{"description":"Configures where on disk logs are written.","type":["string","null"]},"stdio":{"description":"Configures whether logs are also returned to the debug console.","type":"boolean"},"tags":{"description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]},"type":"array"}},"type":"object"}]},"url":{"default":"http://localhost:8080","description":"Will search for a tab with this exact url and attach to it, if found","type":"string"},"urlFilter":{"default":"","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","type":"string"},"useWebView":{"default":false,"description":"(Edge (Chromium) only) When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.","type":"boolean"},"userDataDir":{"default":true,"description":"By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.","type":["string","boolean"]},"vueComponentPaths":{"default":["${workspaceFolder}/**/*.vue"],"description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","type":"array"},"webRoot":{"default":"${workspaceFolder}","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","type":"string"}}}},"configurationSnippets":[{"body":{"name":"Launch Edge","request":"launch","type":"pwa-msedge","url":"http://localhost:8080","webRoot":"^\"${2:\\${workspaceFolder\\}}\""},"description":"Launch Edge to debug a URL","label":"Edge: Launch"},{"body":{"name":"Attach to Chrome","port":9222,"request":"attach","type":"pwa-msedge","webRoot":"^\"${2:\\${workspaceFolder\\}}\""},"description":"Attach to an instance of Edge already in debug mode","label":"Edge: Attach"}],"label":"Edge: Launch","languages":["javascript","typescript","javascriptreact","typescriptreact"],"type":"pwa-msedge"}],"commands":[{"command":"extension.pwa-node-debug.prettyPrint","title":"Pretty print for debugging","category":"Debug"},{"command":"extension.pwa-node-debug.toggleSkippingFile","title":"Toggle Skipping this File","category":"Debug"},{"command":"extension.pwa-chrome-debug.addCustomBreakpoints","title":"Add Browser Breakpoint","icon":"$(add)"},{"command":"extension.pwa-chrome-debug.removeCustomBreakpoint","title":"Remove Browser Breakpoint","icon":"$(remove)"},{"command":"extension.pwa-chrome-debug.removeAllCustomBreakpoints","title":"Remove All Browser Breakpoints","icon":"$(close-all)"},{"command":"extension.pwa-node-debug.attachNodeProcess","title":"Attach to Node Process (preview)","category":"Debug"},{"command":"extension.pwa-node-debug.npmScript","title":"Debug NPM Script","category":"Debug"},{"command":"extension.pwa-node-debug.createDebuggerTerminal","title":"Create JavaScript Debug Terminal","category":"Debug"},{"command":"extension.pwa-node-debug.startProfile","title":"Take Performance Profile","category":"Debug","icon":"$(record)"},{"command":"extension.pwa-node-debug.stopProfile","title":"Stop Performance Profile","category":"Debug","icon":"resources/dark/stop-profiling.svg"},{"command":"extension.js-debug.revealPage","title":"Focus Tab","category":"Debug"}],"configuration":{"title":"JavaScript Debugger","properties":{"debug.javascript.usePreview":{"type":"boolean","default":true,"description":"Use the new in-preview JavaScript debugger for Node.js and Chrome."},"debug.javascript.codelens.npmScripts":{"enum":["top","all","never"],"default":"top","description":"Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\"."},"debug.javascript.warnOnLongPrediction":{"type":"boolean","default":true,"description":"Whether a loading prompt should be shown if breakpoint prediction takes a while."},"debug.javascript.terminalOptions":{"type":"object","description":"Default launch options for the JavaScript debug terminal and npm scripts.","default":{},"properties":{"resolveSourceMapLocations":{"type":["array","null"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","default":["${workspaceFolder}/**","!**/node_modules/**"],"items":{"type":"string"}},"outFiles":{"type":["array"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"items":{"type":"string"}},"pauseForSourceMap":{"type":"boolean","markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","default":false},"showAsyncStacks":{"description":"Show the async calls that led to the current call stack.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","required":["onAttach"],"properties":{"onAttach":{"type":"number","default":32}}},{"type":"object","required":["onceBreakpointResolved"],"properties":{"onceBreakpointResolved":{"type":"number","default":32}}}]},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":["<node_internals>/**"]},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","default":{"webpack://?:*/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","meteor://💻app/*":"${workspaceFolder}/*"}},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":10000},"trace":{"description":"Configures what diagnostic output is produced.","default":true,"oneOf":[{"type":"boolean","description":"Trace may be set to 'true' to write diagnostic logs to the disk."},{"type":"object","additionalProperties":false,"properties":{"console":{"type":"boolean","description":"Whether to return trace data from the launched application or browser."},"stdio":{"type":"boolean","description":"Configures whether logs are also returned to the debug console."},"level":{"enum":["fatal","error","warn","info","verbose"],"description":"Configures the level of logs recorded."},"logFile":{"type":["string","null"],"description":"Configures where on disk logs are written."},"tags":{"type":"array","description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]}}}}]},"outputCapture":{"enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.","default":"console"},"cwd":{"type":"string","description":"Absolute path to the working directory of the program being debugged.","default":"${workspaceFolder}"},"localRoot":{"type":["string","null"],"description":"Path to the local directory containing the program.","default":null},"remoteRoot":{"type":["string","null"],"description":"Absolute path to the remote directory containing the program.","default":null},"autoAttachChildProcesses":{"type":"boolean","description":"Attach debugger to new child processes automatically.","default":true},"env":{"type":"object","additionalProperties":{"type":["string","null"]},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"runtimeSourcemapPausePatterns":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","default":[]},"nodeVersionHint":{"type":"number","minimum":8,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":12},"command":{"type":["string","null"],"description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","default":"npm start"}}},"debug.javascript.suggestPrettyPrinting":{"type":"boolean","description":"Whether to suggest pretty printing JavaScript code that looks minified when you step into it.","default":true},"debug.javascript.automaticallyTunnelRemoteServer":{"type":"boolean","description":"When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.","default":true},"debug.javascript.debugByLinkOptions":{"default":"on","description":"Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to \"off\" to disable this behavior, or \"always\" to enable debugging in all terminals.","oneOf":[{"type":"string","enum":["on","off","always"]},{"type":"object","properties":{"resolveSourceMapLocations":{"type":["array","null"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","default":null,"items":{"type":"string"}},"outFiles":{"type":["array"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"items":{"type":"string"}},"pauseForSourceMap":{"type":"boolean","markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","default":false},"showAsyncStacks":{"description":"Show the async calls that led to the current call stack.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","required":["onAttach"],"properties":{"onAttach":{"type":"number","default":32}}},{"type":"object","required":["onceBreakpointResolved"],"properties":{"onceBreakpointResolved":{"type":"number","default":32}}}]},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":["<node_internals>/**"]},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","default":{"webpack://?:*/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","meteor://💻app/*":"${workspaceFolder}/*"}},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":10000},"trace":{"description":"Configures what diagnostic output is produced.","default":true,"oneOf":[{"type":"boolean","description":"Trace may be set to 'true' to write diagnostic logs to the disk."},{"type":"object","additionalProperties":false,"properties":{"console":{"type":"boolean","description":"Whether to return trace data from the launched application or browser."},"stdio":{"type":"boolean","description":"Configures whether logs are also returned to the debug console."},"level":{"enum":["fatal","error","warn","info","verbose"],"description":"Configures the level of logs recorded."},"logFile":{"type":["string","null"],"description":"Configures where on disk logs are written."},"tags":{"type":"array","description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]}}}}]},"outputCapture":{"enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.","default":"console"},"disableNetworkCache":{"type":"boolean","description":"Controls whether to skip the network cache for each request","default":true},"pathMapping":{"type":"object","description":"A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk","default":{}},"webRoot":{"type":"string","description":"This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"","default":"${workspaceFolder}"},"urlFilter":{"type":"string","description":"Will search for a page with this url and attach to it, if found. Can have * wildcards.","default":""},"url":{"type":"string","description":"Will search for a tab with this exact url and attach to it, if found","default":"http://localhost:8080"},"inspectUri":{"type":["string","null"],"description":"Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n","default":null},"vueComponentPaths":{"type":"array","description":"A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.","default":["${workspaceFolder}/**/*.vue"]},"server":{"oneOf":[{"type":"object","description":"Configures a web server to start up. Takes the same configuration as the 'node' launch task.","additionalProperties":false,"default":{"program":"node my-server.js"},"properties":{"resolveSourceMapLocations":{"type":["array","null"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","default":["${workspaceFolder}/**","!**/node_modules/**"],"items":{"type":"string"}},"outFiles":{"type":["array"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"items":{"type":"string"}},"pauseForSourceMap":{"type":"boolean","markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","default":false},"showAsyncStacks":{"description":"Show the async calls that led to the current call stack.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","required":["onAttach"],"properties":{"onAttach":{"type":"number","default":32}}},{"type":"object","required":["onceBreakpointResolved"],"properties":{"onceBreakpointResolved":{"type":"number","default":32}}}]},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":["<node_internals>/**"]},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","default":{"webpack://?:*/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","meteor://💻app/*":"${workspaceFolder}/*"}},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":10000},"trace":{"description":"Configures what diagnostic output is produced.","default":true,"oneOf":[{"type":"boolean","description":"Trace may be set to 'true' to write diagnostic logs to the disk."},{"type":"object","additionalProperties":false,"properties":{"console":{"type":"boolean","description":"Whether to return trace data from the launched application or browser."},"stdio":{"type":"boolean","description":"Configures whether logs are also returned to the debug console."},"level":{"enum":["fatal","error","warn","info","verbose"],"description":"Configures the level of logs recorded."},"logFile":{"type":["string","null"],"description":"Configures where on disk logs are written."},"tags":{"type":"array","description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]}}}}]},"outputCapture":{"enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.","default":"console"},"cwd":{"type":"string","description":"Absolute path to the working directory of the program being debugged.","default":"${workspaceFolder}"},"localRoot":{"type":["string","null"],"description":"Path to the local directory containing the program.","default":null},"remoteRoot":{"type":["string","null"],"description":"Absolute path to the remote directory containing the program.","default":null},"autoAttachChildProcesses":{"type":"boolean","description":"Attach debugger to new child processes automatically.","default":true},"env":{"type":"object","additionalProperties":{"type":["string","null"]},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"runtimeSourcemapPausePatterns":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","default":[]},"nodeVersionHint":{"type":"number","minimum":8,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":12},"program":{"type":"string","description":"Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.","default":""},"stopOnEntry":{"type":["boolean","string"],"description":"Automatically stop program after launch.","default":true},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal"],"enumDescriptions":["VS Code Debug Console (which doesn't support to read input from a program)","VS Code's integrated terminal","External terminal that can be configured via user settings"],"description":"Where to launch the debug target.","default":"internalConsole"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"restart":{"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","properties":{"delay":{"type":"number","minimum":0,"default":1000},"maxAttempts":{"type":"number","minimum":0,"default":10}}}]},"runtimeExecutable":{"type":["string","null"],"markdownDescription":"Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.","default":"node"},"runtimeVersion":{"type":"string","markdownDescription":"Version of `node` runtime to use. Requires `nvm`.","default":"default"},"runtimeArgs":{"type":"array","description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"default":[]},"profileStartup":{"type":"boolean","description":"If true, will start profiling soon as the process launches","default":true}}},{"type":"object","description":"Create JavaScript Debug Terminal","additionalProperties":false,"default":{"program":"npm start"},"properties":{"resolveSourceMapLocations":{"type":["array","null"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","default":["${workspaceFolder}/**","!**/node_modules/**"],"items":{"type":"string"}},"outFiles":{"type":["array"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"items":{"type":"string"}},"pauseForSourceMap":{"type":"boolean","markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","default":false},"showAsyncStacks":{"description":"Show the async calls that led to the current call stack.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","required":["onAttach"],"properties":{"onAttach":{"type":"number","default":32}}},{"type":"object","required":["onceBreakpointResolved"],"properties":{"onceBreakpointResolved":{"type":"number","default":32}}}]},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":["<node_internals>/**"]},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","default":{"webpack://?:*/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","meteor://💻app/*":"${workspaceFolder}/*"}},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":10000},"trace":{"description":"Configures what diagnostic output is produced.","default":true,"oneOf":[{"type":"boolean","description":"Trace may be set to 'true' to write diagnostic logs to the disk."},{"type":"object","additionalProperties":false,"properties":{"console":{"type":"boolean","description":"Whether to return trace data from the launched application or browser."},"stdio":{"type":"boolean","description":"Configures whether logs are also returned to the debug console."},"level":{"enum":["fatal","error","warn","info","verbose"],"description":"Configures the level of logs recorded."},"logFile":{"type":["string","null"],"description":"Configures where on disk logs are written."},"tags":{"type":"array","description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]}}}}]},"outputCapture":{"enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.","default":"console"},"cwd":{"type":"string","description":"Absolute path to the working directory of the program being debugged.","default":"${workspaceFolder}"},"localRoot":{"type":["string","null"],"description":"Path to the local directory containing the program.","default":null},"remoteRoot":{"type":["string","null"],"description":"Absolute path to the remote directory containing the program.","default":null},"autoAttachChildProcesses":{"type":"boolean","description":"Attach debugger to new child processes automatically.","default":true},"env":{"type":"object","additionalProperties":{"type":["string","null"]},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"runtimeSourcemapPausePatterns":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","default":[]},"nodeVersionHint":{"type":"number","minimum":8,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":12},"command":{"type":["string","null"],"description":"Command to run in the launched terminal. If not provided, the terminal will open without launching a program.","default":"npm start"}}}]},"port":{"type":"number","description":"Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.","default":0},"file":{"type":"string","description":"A local html file to open in the browser","default":"${workspaceFolder}/index.html"},"userDataDir":{"type":["string","boolean"],"description":"By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile.","default":true},"includeDefaultArgs":{"type":"boolean","description":"Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.","default":true},"runtimeExecutable":{"type":["string","null"],"description":"Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.","default":"stable"},"runtimeArgs":{"type":"array","description":"Optional arguments passed to the runtime executable.","items":{"type":"string"},"default":[]},"env":{"type":"object","description":"Optional dictionary of environment key/value pairs for the browser.","default":{}},"cwd":{"type":"string","description":"Optional working directory for the runtime executable.","default":null},"profileStartup":{"type":"boolean","description":"If true, will start profiling soon as the process launches","default":true},"cleanUp":{"type":"string","enum":["wholeBrowser","onlyTab"],"description":"What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.","default":"wholeBrowser"},"browserLaunchLocation":{"description":"Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.","default":null,"oneOf":[{"type":"null"},{"type":"string","enum":["ui","workspace"]}]},"enabled":{"type":"string","enum":["on","off","always"]}}}]},"debug.javascript.pickAndAttachOptions":{"type":"object","default":{},"markdownDescription":"Default options used when debugging a process through the `Debug: Attach to Node.js Process` command","properties":{"resolveSourceMapLocations":{"type":["array","null"],"description":"A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.","default":["${workspaceFolder}/**","!**/node_modules/**"],"items":{"type":"string"}},"outFiles":{"type":["array"],"description":"If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.","default":["${workspaceFolder}/**/*.js","!**/node_modules/**"],"items":{"type":"string"}},"pauseForSourceMap":{"type":"boolean","markdownDescription":"Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.","default":false},"showAsyncStacks":{"description":"Show the async calls that led to the current call stack.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","required":["onAttach"],"properties":{"onAttach":{"type":"number","default":32}}},{"type":"object","required":["onceBreakpointResolved"],"properties":{"onceBreakpointResolved":{"type":"number","default":32}}}]},"skipFiles":{"type":"array","description":"An array of file or folder names, or path globs, to skip when debugging.","default":["<node_internals>/**"]},"smartStep":{"type":"boolean","description":"Automatically step through generated code that cannot be mapped back to the original source.","default":true},"sourceMaps":{"type":"boolean","description":"Use JavaScript source maps (if they exist).","default":true},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.","default":{"webpack://?:*/*":"${workspaceFolder}/*","webpack:///./~/*":"${workspaceFolder}/node_modules/*","meteor://💻app/*":"${workspaceFolder}/*"}},"timeout":{"type":"number","description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":10000},"trace":{"description":"Configures what diagnostic output is produced.","default":true,"oneOf":[{"type":"boolean","description":"Trace may be set to 'true' to write diagnostic logs to the disk."},{"type":"object","additionalProperties":false,"properties":{"console":{"type":"boolean","description":"Whether to return trace data from the launched application or browser."},"stdio":{"type":"boolean","description":"Configures whether logs are also returned to the debug console."},"level":{"enum":["fatal","error","warn","info","verbose"],"description":"Configures the level of logs recorded."},"logFile":{"type":["string","null"],"description":"Configures where on disk logs are written."},"tags":{"type":"array","description":"Configures what types of logs are recorded.","items":{"enum":["cdp","dap","runtime"]}}}}]},"outputCapture":{"enum":["console","std"],"markdownDescription":"From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.","default":"console"},"cwd":{"type":"string","description":"Absolute path to the working directory of the program being debugged.","default":"${workspaceFolder}"},"localRoot":{"type":["string","null"],"description":"Path to the local directory containing the program.","default":null},"remoteRoot":{"type":["string","null"],"description":"Absolute path to the remote directory containing the program.","default":null},"autoAttachChildProcesses":{"type":"boolean","description":"Attach debugger to new child processes automatically.","default":true},"env":{"type":"object","additionalProperties":{"type":["string","null"]},"markdownDescription":"Environment variables passed to the program. The value `null` removes the variable from the environment.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"runtimeSourcemapPausePatterns":{"type":"array","items":{"type":"string"},"markdownDescription":"A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).","default":[]},"nodeVersionHint":{"type":"number","minimum":8,"description":"Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.","default":12},"address":{"type":"string","description":"TCP/IP address of process to be debugged. Default is 'localhost'.","default":"localhost"},"port":{"type":"number","description":"Debug port to attach to. Default is 5858.","default":9229},"restart":{"description":"Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.","default":true,"oneOf":[{"type":"boolean"},{"type":"object","properties":{"delay":{"type":"number","minimum":0,"default":1000},"maxAttempts":{"type":"number","minimum":0,"default":10}}}]},"processId":{"type":"string","description":"ID of process to attach to.","default":"${command:PickProcess}"},"attachExistingChildren":{"type":"boolean","description":"Whether to attempt to attach to already-spawned child processes.","default":false},"continueOnAttach":{"type":"boolean","markdownDescription":"If true, we'll automatically resume programs launched and waiting on `--inspect-brk`","default":true}}},"debug.javascript.autoExpandGetters":{"type":"boolean","default":false,"markdownDescription":"Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it."}}}},"uuid":"25629058-ddac-4e17-abba-74678e126c5d","isBuiltin":false,"isUnderDevelopment":false,"id":"ms-vscode.js-debug","identifier":{"value":"ms-vscode.js-debug","_lower":"ms-vscode.js-debug"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/ms-vscode.js-debug-1.47.5","path":"/root/.vscode/extensions/ms-vscode.js-debug-1.47.5","scheme":"file"}},{"name":"vscode-react-native","displayName":"React Native Tools","version":"1.1.1","private":true,"publisher":"msjsdiag","icon":"images/icon.png","galleryBanner":{"color":"#3B3738","theme":"dark"},"description":"Debugging and integrated commands for React Native","keywords":["react-native","multi-root ready"],"bugs":"https://github.com/microsoft/vscode-react-native/issues","license":"SEE LICENSE IN LICENSE.txt","repository":{"type":"git","url":"https://github.com/microsoft/vscode-react-native"},"engines":{"vscode":"^1.40.0"},"categories":["Debuggers","Other"],"activationEvents":["workspaceContains:node_modules/react-native","onDebugResolve:reactnative","onDebugResolve:reactnativedirect","onDebugInitialConfigurations","onCommand:reactNative.runAndroidSimulator","onCommand:reactNative.runAndroidDevice","onCommand:reactNative.runIosSimulator","onCommand:reactNative.runIosDevice","onCommand:reactNative.runExponent","onCommand:reactNative.startPackager","onCommand:reactNative.stopPackager","onCommand:reactNative.restartPackager","onCommand:reactNative.publishToExpHost","onCommand:reactNative.showDevMenu","onCommand:reactNative.reloadApp","onCommand:reactNative.runInspector"],"main":"./dist/rn-extension","contributes":{"commands":[{"command":"reactNative.launchAndroidSimulator","title":"Launch Android Emulator","category":"React Native"},{"command":"reactNative.runAndroidSimulator","title":"Run Android on Emulator","category":"React Native"},{"command":"reactNative.runAndroidDevice","title":"Run Android on Device","category":"React Native"},{"command":"reactNative.runIosSimulator","title":"Run iOS on Simulator","category":"React Native"},{"command":"reactNative.runIosDevice","title":"Run iOS on Device","category":"React Native"},{"command":"reactNative.runExponent","title":"Run Expo","category":"React Native"},{"command":"reactNative.startPackager","title":"Start Packager","category":"React Native"},{"command":"reactNative.stopPackager","title":"Stop Packager","category":"React Native"},{"command":"reactNative.restartPackager","title":"Restart Packager","category":"React Native"},{"command":"reactNative.publishToExpHost","title":"Publish to Expo","category":"React Native"},{"command":"reactNative.showDevMenu","title":"Show Dev Menu","category":"React Native"},{"command":"reactNative.reloadApp","title":"Reload App","category":"React Native"},{"command":"reactNative.runInspector","title":"Run Element Inspector","category":"React Native"}],"breakpoints":[{"language":"javascript"},{"language":"typescript"},{"language":"javascriptreact"},{"language":"typescriptreact"}],"debuggers":[{"type":"reactnative","label":"React Native","runtime":"node","configurationSnippets":[{"label":"React Native: Debug Android","description":"A new configuration for launching React Native app on Android with debugging enabled","body":{"name":"Debug Android","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"android"}},{"label":"React Native: Run Android","description":"A new configuration for launching React Native app on Android without debugging","body":{"name":"Run Android","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"android","enableDebug":false}},{"label":"React Native: Debug iOS","description":"A new configuration for launching React Native app on iOS with debugging enabled","body":{"name":"Debug iOS","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"ios"}},{"label":"React Native: Run iOS","description":"A new configuration for launching React Native app on iOS without debugging","body":{"name":"Run iOS","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"ios","enableDebug":false}},{"label":"React Native: Debug Windows","description":"A new configuration for launching React Native app on Windows","body":{"name":"Debug Windows","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"windows"}},{"label":"React Native: Debug macOS","description":"A new configuration for launching React Native app on macOS","body":{"name":"Debug macOS","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"macos"}},{"label":"React Native: Attach to packager","description":"A new configuration for attaching to packager","body":{"name":"Attach to packager","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"attach"}},{"label":"React Native: Debug in Exponent","description":"A new configuration for launching Expo app","body":{"name":"Debug in Exponent","cwd":"^\"\\${workspaceFolder}\"","type":"reactnative","request":"launch","platform":"exponent"}}],"configurationAttributes":{"attach":{"required":["cwd"],"properties":{"program":{"type":"string","description":"[DEPRECATED. USE cwd INSTEAD] The path to launchReactNative.js in the vscode folder"},"cwd":{"type":"string","description":"The path to the project root folder","default":"${workspaceFolder}"},"sourceMaps":{"type":"boolean","description":"Whether to use JavaScript source maps to map the generated bundled code back to its original sources","default":false},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the source map says, to their locations on disk. See https://github.com/microsoft/vscode-react-native#typescript-and-haul for details"},"trace":{"type":"string","enum":["verbose","log","warn","error","stop"],"default":"log","description":"Logging level in debugger process. May be useful for diagnostics. If set to \"Trace\" all debugger process logs will be available in 'Debug Console' output window."},"address":{"type":"string","description":"TCP/IP address of packager to attach to for debugging. Default is 'localhost'.","default":"localhost"},"port":{"type":"string","description":"Port of packager to attach to for debugging. Default is 8081.","default":"8081"},"remoteRoot":{"type":"string","description":"The source root of the remote host.","default":null},"localRoot":{"type":"string","description":"The local source root that corresponds to the 'remoteRoot'.","default":"${workspaceFolder}"},"skipFiles":{"type":"array","description":"An array of file or folder names, or glob patterns, to skip when debugging.","items":{"type":"string"},"default":[]},"debuggerWorkerUrlPath":{"type":"string","description":"Path to the app debugger worker to override. For example, if debugger tries to attach to http://localhost:8081/debugger-ui/debuggerWorker.js and you get 404 error from packager output then you may want to change debuggerWorkerUrlPath to another value suitable for your packager (\"debugger-ui\" will be replaced with the value you provide).","default":"debugger-ui/"}}},"launch":{"required":["cwd","platform"],"properties":{"platform":{"type":"string","enum":["ios","android","exponent","windows","wpf","macos"],"description":"The platform to target. Possible values: 'android', 'ios', 'exponent', 'windows', 'wpf', 'macos"},"program":{"type":"string","description":"[DEPRECATED. USE cwd INSTEAD] The path to launchReactNative.js in the vscode folder"},"cwd":{"type":"string","description":"The path to the project root folder","default":"${workspaceFolder}"},"target":{"anyOf":[{"type":"string","enum":["device","simulator"]},{"type":"string"}],"default":"simulator","description":"Target to run on. Possible values: 'simulator', 'device', 'device=<iOS device name>', '<Android emulator/device id>', '<iOS simulator name>'"},"sourceMaps":{"type":"boolean","description":"Whether to use JavaScript source maps to map the generated bundled code back to its original sources","default":false},"logCatArguments":{"type":"array","description":"Arguments to be used for LogCat (The LogCat output will appear on an Output Channel). It can be an array such as: [\":S\", \"ReactNative:V\", \"ReactNativeJS:V\"]","default":["*:S","ReactNative:V","ReactNativeJS:V"]},"runArguments":{"type":"array","description":"Run arguments to be passed to 'react-native run-<platform>' command (override all other configuration params)"},"env":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the debugger and 'react-native run-<platform>' command.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"variant":{"type":"string","description":"A variant to be passed to 'react-native run-android', e.g. use 'devDebug' to specify '--variant=devDebug'"},"scheme":{"type":"string","description":"A scheme name to be passed to 'react-native run-ios', e.g. 'devDebug' to specify '--scheme=devDebug'"},"productName":{"type":"string","description":"iOS bundle display name e.g. 'AwesomeProject' value means that extension will search for 'AwesomeProject.app' bundle"},"skipFiles":{"type":"array","description":"An array of file or folder names, or glob patterns, to skip when debugging.","items":{"type":"string"},"default":[]},"trace":{"type":"string","enum":["verbose","log","warn","error","stop"],"default":"log","description":"Logging level in debugger process. May be useful for diagnostics. If set to \"Trace\" all debugger process logs will be available in 'Debug Console' output window."},"debuggerWorkerUrlPath":{"type":"string","description":"Path to the app debugger worker to override. For example, if debugger tries to attach to http://localhost:8081/debugger-ui/debuggerWorker.js and you get 404 error from packager output then you may want to change debuggerWorkerUrlPath to another value suitable for your packager (\"debugger-ui\" will be replaced with the value you provide).","default":"debugger-ui/"},"launchActivity":{"type":"string","description":"The activity to be launched for debugging. Default is 'MainActivity'.","default":"MainActivity"},"expoHostType":{"type":"string","enum":["tunnel","lan","local"],"default":"tunnel","description":"The connection type to be used on Expo debugging to communicate with a device or an emulator. Default is 'tunnel'."},"enableDebug":{"type":"boolean","description":"Whether to enable debug mode. If set to \"false\", an application will be launched without debugging.","default":true},"openExpoQR":{"type":"boolean","description":"Determines whether to open a tab with a QR code after launching the Expo server. If set to \"false\", a new tab with a QR code won't be opened after the Expo server starts.","default":true}}}}},{"type":"reactnativedirect","label":"React Native Direct - Experimental","runtime":"node","configurationSnippets":[{"label":"React Native Direct: Debug Android Hermes - Experimental","description":"A new configuration for launching React Native Hermes app on Android with debugging enabled","body":{"name":"Debug Android Hermes - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"launch","platform":"android"}},{"label":"React Native Direct: Run Android Hermes- Experimental","description":"A new configuration for launching React Native Hermes app on Android without debugging","body":{"name":"Run Android Hermes - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"launch","platform":"android","enableDebug":false}},{"label":"React Native Direct: Attach to the React Native Hermes - Experimental","description":"A new configuration for attaching to React Native app directly (e.g. to Hermes app, or iOS app with Turbomodules)","body":{"name":"React Native Direct: Attach to the React Native Hermes - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"attach"}},{"label":"React Native Direct: Attach to the React Native iOS - Experimental","description":"A new configuration for attaching to React Native app directly (e.g. to Hermes app, or iOS app with Turbomodules)","body":{"name":"Attach to the React Native iOS - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"attach","platform":"ios","port":9221}},{"label":"React Native Direct: Debug Direct iOS - Experimental","description":"A new configuration for launching React Native app on iOS with direct debugging enabled","body":{"name":"Debug Direct iOS - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"launch","platform":"ios","port":9221}},{"label":"React Native Direct: Run Direct iOS - Experimental","description":"A new configuration for launching React Native app on iOS without direct debugging enabled","body":{"name":"Run Direct iOS - Experimental","cwd":"^\"\\${workspaceFolder}\"","type":"reactnativedirect","request":"launch","platform":"ios","enableDebug":false}}],"configurationAttributes":{"attach":{"required":["cwd"],"properties":{"cwd":{"type":"string","description":"The path to the project root folder","default":"${workspaceFolder}"},"sourceMaps":{"type":"boolean","description":"Whether to use JavaScript source maps to map the generated bundled code back to its original sources","default":false},"sourceMapPathOverrides":{"type":"object","description":"A set of mappings for rewriting the locations of source files from what the source map says, to their locations on disk. See https://github.com/microsoft/vscode-react-native#typescript-and-haul for details"},"platform":{"type":"string","enum":["ios","android"],"description":"The platform to target. Possible values: 'android', 'ios'"},"trace":{"type":"string","enum":["verbose","log","warn","error","stop"],"default":"log","description":"Logging level in debugger process. May be useful for diagnostics. If set to \"Trace\" all debugger process logs will be available in 'Debug Console' output window."},"address":{"type":"string","description":"TCP/IP address of packager to attach to for debugging. Default is 'localhost'.","default":"localhost"},"port":{"type":"number","description":"Port to attach to for debugging. Default for React Native Packager - 8081, for iOS Webkit Debug Proxy - 9221.","default":8081},"webkitRangeMin":{"type":"number","description":"Start of port range to use for iOS device selection.","default":9223},"webkitRangeMax":{"type":"number","description":"End of port range to use for iOS device selection.","default":9322},"skipFiles":{"type":"array","description":"An array of file or folder names, or glob patterns, to skip when debugging.","items":{"type":"string"},"default":[]}}},"launch":{"required":["cwd","platform"],"properties":{"platform":{"type":"string","enum":["android","ios"],"description":"The platform to target. Possible values: 'android', 'ios'"},"cwd":{"type":"string","description":"The path to the project root folder","default":"${workspaceFolder}"},"port":{"type":"number","description":"Port to attach to for debugging. Default for React Native Packager - 8081, for iOS Webkit Debug Proxy - 9221.","default":8081},"webkitRangeMin":{"type":"number","description":"Start of port range to use for iOS device selection.","default":9223},"webkitRangeMax":{"type":"number","description":"End of port range to use for iOS device selection.","default":9322},"target":{"anyOf":[{"type":"string","enum":["device","simulator"]},{"type":"string"}],"default":"simulator","description":"Target to run on. Possible values: 'simulator', 'device', 'device=<iOS device name>', '<Android emulator/device id>', '<iOS simulator name>'"},"sourceMaps":{"type":"boolean","description":"Whether to use JavaScript source maps to map the generated bundled code back to its original sources","default":false},"logCatArguments":{"type":"array","description":"Arguments to be used for LogCat (The LogCat output will appear on an Output Channel). It can be an array such as: [\":S\", \"ReactNative:V\", \"ReactNativeJS:V\"]","default":["*:S","ReactNative:V","ReactNativeJS:V"]},"runArguments":{"type":"array","description":"Run arguments to be passed to 'react-native run-<platform>' command (override all other configuration params)"},"env":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the debugger and 'react-native run-<platform>' command.","default":{}},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","default":"${workspaceFolder}/.env"},"variant":{"type":"string","description":"A variant to be passed to 'react-native run-android', e.g. use 'devDebug' to specify '--variant=devDebug'"},"skipFiles":{"type":"array","description":"An array of file or folder names, or glob patterns, to skip when debugging.","items":{"type":"string"},"default":[]},"trace":{"type":"string","enum":["verbose","log","warn","error","stop"],"default":"log","description":"Logging level in debugger process. May be useful for diagnostics. If set to \"Trace\" all debugger process logs will be available in 'Debug Console' output window."},"launchActivity":{"type":"string","description":"The activity to be launched for debugging. Default is 'MainActivity'.","default":"MainActivity"},"enableDebug":{"type":"boolean","description":"Whether to enable debug mode. If set to \"false\", an application will be launched without debugging.","default":true}}}}}],"configuration":{"type":"object","title":"React Native configuration","properties":{"react-native.ios.runArguments.simulator":{"description":"Run arguments to be passed to 'react-native run-ios' command","type":"array","default":[],"scope":"resource"},"react-native.ios.runArguments.device":{"description":"Run arguments to be passed to 'react-native run-ios' command","type":"array","default":[],"scope":"resource"},"react-native.ios.env.simulator":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{},"scope":"resource"},"react-native.ios.env.device":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{},"scope":"resource"},"react-native.ios.envFile.simulator":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","scope":"resource"},"react-native.ios.envFile.device":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","scope":"resource"},"react-native.android.runArguments.simulator":{"description":"Run arguments to be passed to 'react-native run-android' command","type":"array","default":[],"scope":"resource"},"react-native.android.runArguments.device":{"description":"Run arguments to be passed to 'react-native run-android' command","type":"array","default":[],"scope":"resource"},"react-native.android.env.simulator":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{},"scope":"resource"},"react-native.android.env.device":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the program.","default":{},"scope":"resource"},"react-native.android.envFile.simulator":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","scope":"resource"},"react-native.android.envFile.device":{"type":"string","description":"Absolute path to a file containing environment variable definitions.","scope":"resource"},"react-native.packager.port":{"description":"React Native packager port","type":"number","default":8081,"scope":"resource"},"react-native.packager.status-indicator":{"description":"React Native Packager status representation in the VS Code status bar","type":"string","enum":["Full","Short"],"default":"Full","scope":"resource"},"react-native-tools.reactNativeGlobalCommandName":{"description":"The command name to be used to execute React Native CLI commands.","type":"string","scope":"resource"},"react-native-tools.projectRoot":{"description":"Subfolder in which the React Native project is located","type":"string","scope":"resource","default":""},"react-native-tools.logLevel":{"description":"Logging level in extension","type":"enum","enum":["Trace","Debug","Info","Warning","Error","None"],"default":"Info","scope":"resource"}}}},"scripts":{"build":"gulp build","vscode:prepublish":"gulp","test":"node ./test/runTest.js","test-localization":"node ./test/localization/runTest.js","prepare-smoke-tests":"cd test/smoke && gulp prepare-smoke-tests && yarn --cwd ./vscode install","smoke-tests":"cd test/smoke && gulp prepare-smoke-tests && yarn --cwd ./vscode install && yarn --cwd ./vscode/test/smoke mocha","quick-smoke-tests":"cd test/smoke/vscode/test/smoke && yarn mocha --skip-setup"},"dependencies":{"configstore":"^5.0.1","extract-opts":"2.2.0","flatten-source-map":"0.0.2","glob":"^7.1.6","ip":"^1.1.5","mkdirp":"^1.0.3","qr-image":"^3.2.0","semver":"^6.3.0","source-map":"0.5.2","source-map-resolve":"^0.5.3","strip-json-comments":"2.0.1","vscode-cdp-proxy":"^0.2.0","vscode-debugadapter":"^1.39.1","vscode-extension-telemetry":"0.0.5","vscode-nls":"^4.1.2","ws":"^7.3.0"},"devDependencies":{"@types/configstore":"^4.0.0","@types/ip":"^1.1.0","@types/mkdirp":"^1.0.0","@types/mocha":"^8.0.3","@types/ncp":"^2.0.3","@types/node":"^10.17.26","@types/qr-image":"^3.2.3","@types/rimraf":"^3.0.0","@types/semver":"^6.2.1","@types/shelljs":"^0.7.0","@types/source-map":"0.5.2","@types/source-map-support":"^0.2.28","@types/vscode":"^1.40.0","@types/websocket":"0.0.33","@types/ws":"^0.0.39","@typescript-eslint/eslint-plugin":"^3.7.1","@typescript-eslint/parser":"^3.7.1","ansi-colors":"^3.2.4","copy-webpack-plugin":"^6.0.2","del":"^2.2.0","devtools-protocol":"0.0.762508","eslint":"^6.8.0","eslint-plugin-header":"^3.0.0","event-stream":"3.3.4","fancy-log":"^1.3.3","gulp":"^4.0.2","gulp-filter":"^6.0.0","gulp-istanbul":"^1.1.3","gulp-mocha":"^7.0.2","gulp-preprocess":"^3.0.3","gulp-sourcemaps":"^2.6.5","gulp-typescript":"^5.0.1","isparta":"^4.1.1","minimist":"^1.2.5","mocha":"^8.1.3","mocha-junit-reporter":"^1.23.3","mocha-multi-reporters":"^1.1.7","ncp":"^2.0.0","plugin-error":"^1.0.1","remap-istanbul":"^0.13.0","rimraf":"^3.0.2","should":"^8.3.0","sinon":"^1.17.3","source-map-support":"^0.4.0","through2":"^2.0.1","ts-loader":"^7.0.5","typescript":"^3.9.7","vsce":"^1.77.0","vscode-debugprotocol":"^1.40.0","vscode-nls-dev":"^3.3.2","vscode-test":"^1.4.0","webpack":"^4.43.0","webpack-bundle-analyzer":"^3.8.0"},"extensionDependencies":["ms-vscode.js-debug"],"uuid":"b35cd5b4-18db-46f9-ba9e-06096c3b22d3","isBuiltin":false,"isUnderDevelopment":false,"id":"msjsdiag.vscode-react-native","identifier":{"value":"msjsdiag.vscode-react-native","_lower":"msjsdiag.vscode-react-native"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/msjsdiag.vscode-react-native-1.1.1","path":"/root/.vscode/extensions/msjsdiag.vscode-react-native-1.1.1","scheme":"file"}},{"name":"material-icon-theme","displayName":"Material Icon Theme","description":"Material Design Icons for Visual Studio Code","version":"4.4.0","publisher":"PKief","engines":{"vscode":"^1.31.0"},"homepage":"https://github.com/PKief/vscode-material-icon-theme/blob/master/README.md","repository":{"type":"git","url":"https://github.com/PKief/vscode-material-icon-theme.git"},"bugs":{"url":"https://github.com/PKief/vscode-material-icon-theme/issues"},"icon":"logo.png","galleryBanner":{"color":"#1e1e1e","theme":"dark"},"categories":["Themes"],"keywords":["icons","theme","material","icon-theme","customization"],"extensionKind":["ui","workspace"],"activationEvents":["*"],"main":"./dist/extension","contributes":{"iconThemes":[{"id":"material-icon-theme","label":"Material Icon Theme","path":"./dist/material-icons.json","_watch":true}],"commands":[{"command":"material-icon-theme.activateIcons","title":"Material Icons: Activate Icon Theme"},{"command":"material-icon-theme.toggleIconPacks","title":"Material Icons: Configure Icon Packs"},{"command":"material-icon-theme.changeFolderTheme","title":"Material Icons: Change Folder Theme"},{"command":"material-icon-theme.changeFolderColor","title":"Material Icons: Change Folder Color"},{"command":"material-icon-theme.restoreDefaultConfig","title":"Material Icons: Restore Default Configuration"},{"command":"material-icon-theme.toggleExplorerArrows","title":"Material Icons: Toggle Explorer Arrows"},{"command":"material-icon-theme.changeOpacity","title":"Material Icons: Change Opacity"},{"command":"material-icon-theme.toggleGrayscale","title":"Material Icons: Toggle Grayscale"},{"command":"material-icon-theme.changeSaturation","title":"Material Icons: Change Saturation"}],"configuration":{"type":"object","title":"Material Icons","properties":{"material-icon-theme.showWelcomeMessage":{"type":"boolean","default":true,"description":"Show the welcome message after first installation."},"material-icon-theme.showUpdateMessage":{"type":"boolean","default":false,"description":"Show the update message after each update."},"material-icon-theme.showReloadMessage":{"type":"boolean","default":true,"description":"Show restart notification."},"material-icon-theme.activeIconPack":{"type":"string","default":"angular","description":"Select an icon pack that enables specific icons.","enumDescriptions":["Icons for Angular.","Icons for Angular and ngrx.","Icons for React.","Icons for React and Redux.","Icons for Vue.","Icons for Vue and Vuex.","Icons for NestJS.","No icon pack enabled."],"enum":["angular","angular_ngrx","react","react_redux","vue","vue_vuex","nest","none"]},"material-icon-theme.files.associations":{"type":"object","default":{},"description":"Set custom file icon associations."},"material-icon-theme.folders.associations":{"type":"object","default":{},"description":"Set custom folder icon associations."},"material-icon-theme.languages.associations":{"type":"object","default":{},"description":"Set custom language icon associations."},"material-icon-theme.folders.theme":{"type":"string","default":"specific","description":"Set the type for the folder icons.","enumDescriptions":["Select specific folder icons.","Select classic folder icons.","No folder icons."],"enum":["specific","classic","none"]},"material-icon-theme.folders.color":{"type":"string","default":"#90a4ae","pattern":"^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$","description":"Change the color of the folder icons."},"material-icon-theme.opacity":{"type":"number","default":1,"minimum":0,"maximum":1,"description":"Change the opacity of the icons."},"material-icon-theme.hidesExplorerArrows":{"type":"boolean","default":false,"description":"Hide explorer arrows before folder."},"material-icon-theme.saturation":{"type":"number","default":1,"minimum":0,"maximum":1,"description":"Change the saturation of the icons."}}}},"scripts":{"build":"npm run compile:dev && npm run postcompile","check":"ts-node ./src/scripts/icons/checks","compile":"webpack --mode production","compile:dev":"webpack --mode none","compile:watch":"webpack --mode none --watch","contributors":"ts-node ./src/scripts/contributors/index.ts","generateJson":"ts-node ./src/scripts/icons/generateJson.ts","lint":"eslint -c .eslintrc.json --ext .ts ./src/**/*.ts","postcompile":"npm run generateJson && npm run check","pretest":"npm run build && tsc -p ./","preview":"ts-node ./src/scripts/preview","test":"node ./out/test/runTest.js","vscode:prepublish":"npm run lint && npm run compile"},"dependencies":{"lodash.merge":"4.6.2","semver":"7.3.2"},"devDependencies":{"@types/glob":"^7.1.3","@types/mocha":"^8.0.3","@types/node":"^14.6.4","@types/puppeteer":"^3.0.2","@types/vscode":"~1.31.0","@typescript-eslint/eslint-plugin":"^4.1.0","@typescript-eslint/parser":"^4.1.0","clean-webpack-plugin":"^3.0.0","eslint":"^7.8.1","eslint-config-prettier":"^6.12.0","glob":"^7.1.6","mocha":"^8.1.3","puppeteer":"^5.2.1","rimraf":"^3.0.2","ts-loader":"^8.0.3","ts-node":"^9.0.0","typescript":"^4.0.2","vscode-test":"^1.4.0","webpack":"^4.44.1","webpack-cli":"^3.3.12"},"uuid":"5db78037-f674-459f-a236-db622c427c5b","isBuiltin":false,"isUnderDevelopment":false,"id":"PKief.material-icon-theme","identifier":{"value":"PKief.material-icon-theme","_lower":"pkief.material-icon-theme"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/pkief.material-icon-theme-4.4.0","path":"/root/.vscode/extensions/pkief.material-icon-theme-4.4.0","scheme":"file"}},{"name":"full-react-snippets","displayName":"Fullstack React/React Native snippets","description":"Code snippets for React/React Native and extra libs","version":"1.4.2","icon":"images/logo.png","publisher":"walter-ribeiro","repository":{"type":"git","url":"https://github.com/walteribeiro/full-react-snippets"},"bugs":{"url":"https://github.com/walteribeiro/full-react-snippets/issues"},"engines":{"vscode":"^1.12.0"},"categories":["Snippets"],"keywords":["snippets","react/react-native","react-router","Redux","GraphQL","React Hooks","Reactotron","styled components"],"contributes":{"snippets":[{"language":"javascriptreact","path":"./snippets/snippets.json"},{"language":"javascript","path":"./snippets/snippets.json"},{"language":"typescript","path":"./snippets/snippets.json"},{"language":"typescriptreact","path":"./snippets/snippets.json"}]},"devDependencies":{"json-concat":"^0.0.1"},"scripts":{"concat":"node_modules\\.bin\\json-concat snippets/types/ snippets/snippets.json"},"uuid":"b50dfe0a-e906-4a90-853b-ffd40ec2b865","isBuiltin":false,"isUnderDevelopment":false,"id":"walter-ribeiro.full-react-snippets","identifier":{"value":"walter-ribeiro.full-react-snippets","_lower":"walter-ribeiro.full-react-snippets"},"extensionLocation":{"$mid":1,"fsPath":"/root/.vscode/extensions/walter-ribeiro.full-react-snippets-1.4.2","path":"/root/.vscode/extensions/walter-ribeiro.full-react-snippets-1.4.2","scheme":"file"}}]}